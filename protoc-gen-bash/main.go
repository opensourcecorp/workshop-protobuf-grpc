package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	opts := protogen.Options{}
	opts.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if f.Generate {
				generateFile(gen, f)
			}
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_bash.pb.sh"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("#!/usr/bin/env bash")
	g.P("set -euo pipefail")
	g.P()
	g.P("#################################################")
	g.P("# Code generated by protoc-gen-bash. DO NOT EDIT.")
	g.P("#")
	g.P("# source file: ", *file.Proto.Name)
	g.P("#################################################")
	g.P()
	g.P(`printf 'The messages defined in the provided proto file(s) are:\n'`)
	g.P()
	g.P(`printf '`)
	printMessages(g, file.Messages)
	g.P(`'`)
}

// printMessages traverses nested Messages recursively and prints their
// FullNames along with their Field information
func printMessages(g *protogen.GeneratedFile, msgs []*protogen.Message) {
	for _, msg := range msgs {
		var fields []string
		for _, field := range msg.Fields {
			fieldName := string(field.Desc.Name())

			// Cardinality tells us e.g. if a field is repeated
			fieldCardinality := field.Desc.Cardinality().String()
			if fieldCardinality != "repeated" {
				fieldCardinality = ""
			} else {
				fieldCardinality += "_"
			}

			fieldType := field.Desc.Kind().String()
			fields = append(fields, fieldName+":"+fieldCardinality+fieldType)
		}
		// In case a message has no fields, like ListEmployeesRequest
		if len(fields) == 0 {
			fields = []string{"<none>"}
		}

		g.P(`  `, msg.Desc.FullName(), " (fields: ", strings.Join(fields, ", "), ")")
		if len(msg.Messages) > 0 {
			printMessages(g, msg.Messages)
		}
	}
}
