syntax = "proto3";

// Proto packages should match the directory structure in your tree. The version
// suffix is considered best-practice
package echo.v1;

// So the Go output knows its own import path -- this needs to match the output
// directory structure that your protoc invocation creates!
option go_package = "github.com/opensourcecorp/workshops/protobuf-grpc/pb/echo/v1";

// TODO: once I figure out how Java works lol
// // You also need to specify any other appropriate static options for other
// // languages; here's where you specify the Java package name, for example
// option java_package = "org.opensourcecorp.workshops.protobuf_grpc.echo.v1";

// Service that shows a few ways to work with protobufs and gRPC
service EchoService {
  // Echo responds to the caller with the same message they sent
  rpc Echo(EchoRequest) returns (EchoResponse);
}

// The request sent to the Echo Service's Echo method
message EchoRequest {
  // The message to be echo'd back to the caller
  string msg = 1;
}

// The response from the Echo Service's Echo method
message EchoResponse {
  // The message to be echo'd back to the caller
  string msg = 1;
}
