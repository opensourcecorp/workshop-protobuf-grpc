// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: employees/v1/employees.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmployeesService_GetEmployee_FullMethodName   = "/employees.v1.EmployeesService/GetEmployee"
	EmployeesService_ListEmployees_FullMethodName = "/employees.v1.EmployeesService/ListEmployees"
)

// EmployeesServiceClient is the client API for EmployeesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeesServiceClient interface {
	// GetEmployee takes a short (friendly) name for a single employee, and
	// returns that employee's associated record
	GetEmployee(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetEmployeeResponse, error)
	// ListEmployees returns all possible employees' short names that can be used
	// in calls to GetEmployee
	ListEmployees(ctx context.Context, in *ListEmployeesRequest, opts ...grpc.CallOption) (*ListEmployeesResponse, error)
}

type employeesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeesServiceClient(cc grpc.ClientConnInterface) EmployeesServiceClient {
	return &employeesServiceClient{cc}
}

func (c *employeesServiceClient) GetEmployee(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetEmployeeResponse, error) {
	out := new(GetEmployeeResponse)
	err := c.cc.Invoke(ctx, EmployeesService_GetEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) ListEmployees(ctx context.Context, in *ListEmployeesRequest, opts ...grpc.CallOption) (*ListEmployeesResponse, error) {
	out := new(ListEmployeesResponse)
	err := c.cc.Invoke(ctx, EmployeesService_ListEmployees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeesServiceServer is the server API for EmployeesService service.
// All implementations should embed UnimplementedEmployeesServiceServer
// for forward compatibility
type EmployeesServiceServer interface {
	// GetEmployee takes a short (friendly) name for a single employee, and
	// returns that employee's associated record
	GetEmployee(context.Context, *GetEmployeeRequest) (*GetEmployeeResponse, error)
	// ListEmployees returns all possible employees' short names that can be used
	// in calls to GetEmployee
	ListEmployees(context.Context, *ListEmployeesRequest) (*ListEmployeesResponse, error)
}

// UnimplementedEmployeesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEmployeesServiceServer struct {
}

func (UnimplementedEmployeesServiceServer) GetEmployee(context.Context, *GetEmployeeRequest) (*GetEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedEmployeesServiceServer) ListEmployees(context.Context, *ListEmployeesRequest) (*ListEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployees not implemented")
}

// UnsafeEmployeesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeesServiceServer will
// result in compilation errors.
type UnsafeEmployeesServiceServer interface {
	mustEmbedUnimplementedEmployeesServiceServer()
}

func RegisterEmployeesServiceServer(s grpc.ServiceRegistrar, srv EmployeesServiceServer) {
	s.RegisterService(&EmployeesService_ServiceDesc, srv)
}

func _EmployeesService_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeesService_GetEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).GetEmployee(ctx, req.(*GetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_ListEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).ListEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeesService_ListEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).ListEmployees(ctx, req.(*ListEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeesService_ServiceDesc is the grpc.ServiceDesc for EmployeesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employees.v1.EmployeesService",
	HandlerType: (*EmployeesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployee",
			Handler:    _EmployeesService_GetEmployee_Handler,
		},
		{
			MethodName: "ListEmployees",
			Handler:    _EmployeesService_ListEmployees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employees/v1/employees.proto",
}
