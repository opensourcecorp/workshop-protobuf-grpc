# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import employees_pb2 as employees_dot_v1_dot_employees__pb2


class EmployeesServiceStub(object):
    """Service for interacting with an employee record database
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEmployee = channel.unary_unary(
                '/employees.v1.EmployeesService/GetEmployee',
                request_serializer=employees_dot_v1_dot_employees__pb2.GetEmployeeRequest.SerializeToString,
                response_deserializer=employees_dot_v1_dot_employees__pb2.GetEmployeeResponse.FromString,
                )
        self.ListEmployees = channel.unary_unary(
                '/employees.v1.EmployeesService/ListEmployees',
                request_serializer=employees_dot_v1_dot_employees__pb2.ListEmployeesRequest.SerializeToString,
                response_deserializer=employees_dot_v1_dot_employees__pb2.ListEmployeesResponse.FromString,
                )


class EmployeesServiceServicer(object):
    """Service for interacting with an employee record database
    """

    def GetEmployee(self, request, context):
        """GetEmployee takes a short (friendly) name for a single employee, and
        returns that employee's associated record
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEmployees(self, request, context):
        """ListEmployees returns all possible employees' short names that can be used
        in calls to GetEmployee
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmployeesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmployee,
                    request_deserializer=employees_dot_v1_dot_employees__pb2.GetEmployeeRequest.FromString,
                    response_serializer=employees_dot_v1_dot_employees__pb2.GetEmployeeResponse.SerializeToString,
            ),
            'ListEmployees': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEmployees,
                    request_deserializer=employees_dot_v1_dot_employees__pb2.ListEmployeesRequest.FromString,
                    response_serializer=employees_dot_v1_dot_employees__pb2.ListEmployeesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'employees.v1.EmployeesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmployeesService(object):
    """Service for interacting with an employee record database
    """

    @staticmethod
    def GetEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employees.v1.EmployeesService/GetEmployee',
            employees_dot_v1_dot_employees__pb2.GetEmployeeRequest.SerializeToString,
            employees_dot_v1_dot_employees__pb2.GetEmployeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEmployees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employees.v1.EmployeesService/ListEmployees',
            employees_dot_v1_dot_employees__pb2.ListEmployeesRequest.SerializeToString,
            employees_dot_v1_dot_employees__pb2.ListEmployeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
